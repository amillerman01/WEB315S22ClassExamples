@page "/todo"

@* Using a lambda expression *@
@* <h3>Todo (Items left: @todos.Count(todo => !todo.IsDone))</h3> *@

@* Using a regular function for the Count condition checking *@
@* Count will run this method for each item in the todos list *@
<h3>Todo (Items left: @todos.Count(checkHowManyItemsAreDone))</h3>

<ul>
    @foreach (var todo in todos)
    {
        <input type="checkbox" @bind="todo.IsDone" />
        <li>@todo.Title</li>
    }
</ul>

<input @bind="newTodo" placeholder="Something todo" />
<button @onclick="AddTodo">Add todo</button>

@code {
    private List<TodoItem> todos = new List<TodoItem>();
    private string newTodo;
    @* private int count = 0; *@

    private void AddTodo()
    {
        @* Testing adding a static value to our todos list *@
        @* todos.Add(new TodoItem { Title = "New Todo Item" + (++count) }); *@

        @* Adding a dynamic value to our todo list *@
        if (!string.IsNullOrWhiteSpace(newTodo))
        {
            @* todos.Add(new TodoItem { Title = newTodo }); *@

            // the long version of the code above
            TodoItem newItem = new TodoItem { Title = newTodo };
            todos.Add(newItem);
            newTodo = string.Empty; // reset the value of the input to be empty
        }
    }

    private bool checkHowManyItemsAreDone(TodoItem todo)
    {
        // if the item isn't done, the count should keep track of it
        return !todo.IsDone;
    }

}
