@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

@if (!string.IsNullOrEmpty(userPing))
{
    <h4>
        @userPing
    </h4>
}
<div class="form-group">
    <label>
        User:
        <input @bind="userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<div class="form-group">
    <button @onclick="Send" disabled="@(!IsConnected)">Send to everyone</button>
</div>
<div class="form-group">
    <button @onclick="SendToMe" disabled="@(!IsConnected)">Send to only myself</button>
</div>
<div class="form-group">
    <button @onclick="SendToOthers" disabled="@(!IsConnected)">Send to everyone except myself</button>
</div>
<div class="form-group">
    <button @onclick="SendPing" disabled="@(!IsConnected)">Send ping</button>
</div>
<div class="form-group">
    <button @onclick="SendPingToMyself" disabled="@(!IsConnected)">Send ping to me</button>
</div>
<hr>

@if (messages.Count > 0)
{
    <ul id="messagesList">
        @foreach (var message in messages)
        {
            <li>@message</li>
        }
    </ul>
}

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userPing;
    private string userInput;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            @* var encodedMsg = user + ":" + message; *@
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string, string>("ReceiveMessageOthers", (user, message) =>
        {
            var encodedMsg = $"Message from {user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        hubConnection.On<string>("PingUsers", (user) =>
        {
            var encodedMsg = $"{user} has pinged the chat";
            userPing = encodedMsg;
            StateHasChanged();
        });

        hubConnection.On<string, int>("PingMyself", (user, pingNumber) =>
        {
            var encodedMsg = $"Hi {user}, your ping is: {pingNumber}";
            userPing = encodedMsg;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    @* async Task Send() {
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        // do something after the message sending completes
        } *@
    async Task Send() =>
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    async Task SendToMe() =>
    await hubConnection.SendAsync("SendMessageToCaller", userInput, messageInput);

    async Task SendToOthers() =>
    await hubConnection.SendAsync("SendMessageToOthers", userInput, messageInput);

    async Task SendPing() =>
    await hubConnection.SendAsync("SendPingToOthers", userInput);

    async Task SendPingToMyself() =>
    await hubConnection.SendAsync("SendPingToCaller", userInput);

    @* public bool IsConnected { get {
        return hubConnection.State == HubConnectionState.Connected;
        }; set; } *@

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}