@page
@using RazorPagesClassExample.Models;
@model IndexModel
@{
    ViewData["Title"] = "Home page";
    var username = "amillerman01"; // local variable we will use later
    DateTime beginningOfTime = new DateTime(); // local variable with a specific type set and object is initialized
    var valueFromTheServer = "<div>Some potentially unsafe string with html in it</div>";
    <h2>some html directly in the code block is allowed</h2>
}

<div class="index-wrapper">
    <h1 class="display-4">My first web application!</h1>
    <div>
        <h3>Static date time example</h3>
        The date and time right now STATICALLY is <strong>5/17/2022 1:30:50 PM</strong>
    </div>
    <div>
        <h3>Dynamic date time example</h3>
        The date and time right now DYNAMICALLY is <strong>@DateTime.Now</strong>
    </div>
    <div>
        <h3>Dynamic date time example using UTC</h3>
        The date and time right now at the prime meridian DYNAMICALLY <strong>@DateTime.UtcNow</strong><br>
        For more info on what UTC is, you can go <a href="https://www.timeanddate.com/worldclock/timezone/utc">here</a>
    </div>
    <div>
        <h3>Date from an object</h3>
        Date value if we just output the value assigned by default: @beginningOfTime
    </div>
    <div>
        <h3>Example of accessing a local variable</h3>
        The username is @username
    </div>
    <div>
        <h3>Example of escaping the @@ symbol</h3>
        email me at amillerman01@@stclaircollege.ca
    </div>
    <div>
        <h3>Usecase example of @@: Documentation of razor syntax</h3>
        Example: In order to display the razor syntax @@username, we need to use 2 at symbols
    </div>
    <div>
        <h3>Special characters in html</h3>
        &amp;<br>
        &copy;<br>
        word 1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;word 2<br>
        word 1 word 2
    </div>
    <div>
        <h3>Using the date object</h3>
        <div>The current date is: @DateTime.Now</div>
        @* Example of using a ternary operator *@
        @* <div>is 2050 a leap year? The server says: @( condition ? valueIfItIsTrue : valueIfItIsFalse)</div> *@
        <div>Is 2050 a leap year? The server says: <strong>@(DateTime.IsLeapYear(2050) ? "Yes" : "No")</strong></div>
        <div>The date a week ago is @(DateTime.Now - TimeSpan.FromDays(7))</div>
        <div>The date a week from now is @(DateTime.Now + TimeSpan.FromDays(7))</div>
    </div>
    <div>
        <h3>Html Encoding Example</h3>
        <div>Outputting a string to html: @valueFromTheServer</div>
        <div>Useful for content to be marked as unsafe by default, such as when it comes from a WYSIWYG editor (what you
            see is what you get)</div>
    </div>
    <div>
        <h3>Trusting html from a string</h3>
        <p>If we trust the html we received in the string, we can still output it using @@Html.Raw()</p>
        <p>@Html.Raw(valueFromTheServer)</p>
    </div>
    <div>
        <h3>Code Block example</h3>
        @* <span>trying to acess it before Code Block: @localName</span><br> *@
        @{
            var localName = "Andrew";
            @* defined here in the code block, but accessible anywhere after this point in the file *@
            <span>Using razor syntax inside of a razor code Block: @localName</span><br>
        }
        <span>I can also access it outside of the code Block: @localName</span>
    </div>
    <div>
        <h3>Cannot declare variable in explicit expression</h3>
        @* <h3>Trying to set a value in an explicit expression: @(var somevariable = 10)</h3> *@
    </div>
    <div>
        <h3>Transitions</h3>
        <div>Implicit:
            @{
                var implicitTransitionValue = 10;
                <div>We can put html directly in the code block: @implicitTransitionValue</div>
            }
        </div>
        <div>Explicit:
            @{
                var explicitTransitionValue = 20;
                @* the text tag will not be rendered on the page *@
                <text>
                    <p>We can put html directly in the code block: @explicitTransitionValue</p>
                </text>
            }
        </div>
    </div>
    <div>
        <h3>Control Structures : if statements</h3>
        @{
            var value = 81;
        }
        @if (value % 2 == 0) // value is an even number, because the remainder when divided by 2 is 0
        {
            <p>The value was even.</p>
        }
        else if (value >= 9000)
        {
            <p>The value is large.</p>
        }
        else
        {
            <p>The value is odd and small.</p>
        }
    </div>
    <div>
        <h3>Control Structures : Switch statements</h3>
        @switch (value)
        {
            case 1:
                <p>The value is 1!</p>
                break;
            case 9000:
                <p>Your number is 9000!</p>
                break;
            default:
                <p>Your number wasn't 1 or 9000.</p>
                break;
        }
        <p>Switch statements really shine when checking for ENUM values</p>
    </div>
    <div>
        <h3>Control Structures : Switch statements</h3>
        @{

            var anotherTeacher = new Person("Chad", 30);
            <p>anotherTeacher's name: @anotherTeacher.Name</p>
            <p>anotherTeacher's age: @anotherTeacher.Age</p>
            var people = new Person[]
            {
        new Person("Alex", 33),
        new Person("Andrew", 41),
        new Person("Diana", 28),
        anotherTeacher
            };
        }
        @for (var i = 0; i < people.Length; i++)
        {
            <p>Current index is: @i</p>
            var person = people[i];
            <p>Name: @person.Name</p>
            <p>Age: @person.Age</p>
        }
    </div>
    <div>
        <h3>A simple form using @@using</h3>
        @using (Html.BeginForm())
        {
            <div>
                <label>
                    Email:
                    <input type="email" id="Email" value="">
                </label>
                <button>Register</button>
            </div>
        }
    </div>
</div>